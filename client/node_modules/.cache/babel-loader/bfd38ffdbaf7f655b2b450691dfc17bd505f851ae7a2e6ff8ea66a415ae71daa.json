{"ast":null,"code":"import React,{useState,useEffect}from'react';import EmployeeManagement from'./components/EmployeeManagement';import DepartmentManagement from'./components/DepartmentManagement';import{getDepartments,getEmployees,deleteEmployee,updateEmployee,deleteDepartment,updateDepartment}from'./services/api';import{Box,Container,Typography,Divider,Tabs,Tab}from'@mui/material';import{jsx as _jsx,jsxs as _jsxs}from\"react/jsx-runtime\";function TabPanel(_ref){let{children,value,index}=_ref;return/*#__PURE__*/_jsx(\"div\",{role:\"tabpanel\",hidden:value!==index,children:value===index&&/*#__PURE__*/_jsx(Box,{sx:{p:3},children:children})});}function App(){const[tabIndex,setTabIndex]=useState(0);// Manage the active tab\nconst[departments,setDepartments]=useState([]);const[employees,setEmployees]=useState([]);// Handle tab change\nconst handleTabChange=(event,newValue)=>{setTabIndex(newValue);};const handleDeleteEmployee=async employeeId=>{try{// Call the API to delete the employee\nawait deleteEmployee(employeeId);// This should be the API call to delete the employee\n// After deleting, re-fetch the employee and department lists to refresh the UI\nawait fetchEmployees();await fetchDepartments();}catch(error){console.error(\"Error deleting employee:\",error);}};const handleEditEmployee=async employee=>{try{console.log('In handleEditEmployee:',employee);await updateEmployee(employee._id,employee);//Add a short delay to account for database processing time\nawait new Promise(resolve=>setTimeout(resolve,200));// After updating, re-fetch the employee and department lists to refresh the UI\nawait fetchEmployees();await fetchDepartments();}catch(error){console.error(\"Error updating employee:\",error);}};const handleEditDepartment=async department=>{try{// console.log(employee);\nawait updateDepartment(department._id,department);//Add a short delay to account for database processing time\nawait new Promise(resolve=>setTimeout(resolve,200));// After updating, re-fetch the employee and department lists to refresh the UI\nawait fetchEmployees();await fetchDepartments();}catch(error){console.error(\"Error updating department:\",error);}};// Fetch departments with employees\nconst fetchDepartments=async()=>{const data=await getDepartments();setDepartments(data);};// Fetch employees grouped by department\nconst fetchEmployees=async()=>{const data=await getEmployees();setEmployees(data);};// Fetch data initially when the app loads\nuseEffect(()=>{fetchDepartments();fetchEmployees();},[]);// Function to be passed to EmployeeForm to refresh data after new employee creation\nconst handleEmployeeCreated=async()=>{// For some reason, both departments and employees need to be fetched\n// in order to update the EmployeeList UI after a new employee is created.\n// This is a workaround to refresh the data.\n// It may have something to do with the way the data is modeled - \n// i.e. a circular reference. (departments have employees and employees have departments).\nawait fetchDepartments();await fetchEmployees();};const handleDepartmentCreated=async()=>{await fetchDepartments();};const handleDeleteDepartment=async departmentId=>{try{// Call the API to delete the department\nawait deleteDepartment(departmentId);// This should be the API call to delete the department\n// After deleting, re-fetch the employee and department lists to refresh the UI\nawait fetchEmployees();await fetchDepartments();}catch(error){console.error(\"Error deleting department:\",error);}};return/*#__PURE__*/_jsxs(Container,{maxWidth:\"lg\",children:[/*#__PURE__*/_jsxs(Box,{sx:{textAlign:'center',my:4},children:[/*#__PURE__*/_jsx(Typography,{variant:\"h3\",gutterBottom:true,children:\"Apollonia Dental Employee Management\"}),/*#__PURE__*/_jsx(Divider,{})]}),/*#__PURE__*/_jsxs(Tabs,{value:tabIndex,onChange:handleTabChange,indicatorColor:\"primary\",textColor:\"primary\",centered:true,children:[/*#__PURE__*/_jsx(Tab,{label:\"Manage Employees\"}),/*#__PURE__*/_jsx(Tab,{label:\"Manage Departments\"})]}),/*#__PURE__*/_jsx(TabPanel,{value:tabIndex,index:0,children:/*#__PURE__*/_jsx(EmployeeManagement,{employees:employees,departments:departments,onEmployeeCreated:handleEmployeeCreated,onDelete:handleDeleteEmployee,onEdit:handleEditEmployee})}),/*#__PURE__*/_jsx(TabPanel,{value:tabIndex,index:1,children:/*#__PURE__*/_jsx(DepartmentManagement,{departments:departments,onDepartmentCreated:handleDepartmentCreated,onDelete:handleDeleteDepartment,onEdit:handleEditDepartment})})]});}export default App;","map":{"version":3,"names":["React","useState","useEffect","EmployeeManagement","DepartmentManagement","getDepartments","getEmployees","deleteEmployee","updateEmployee","deleteDepartment","updateDepartment","Box","Container","Typography","Divider","Tabs","Tab","jsx","_jsx","jsxs","_jsxs","TabPanel","_ref","children","value","index","role","hidden","sx","p","App","tabIndex","setTabIndex","departments","setDepartments","employees","setEmployees","handleTabChange","event","newValue","handleDeleteEmployee","employeeId","fetchEmployees","fetchDepartments","error","console","handleEditEmployee","employee","log","_id","Promise","resolve","setTimeout","handleEditDepartment","department","data","handleEmployeeCreated","handleDepartmentCreated","handleDeleteDepartment","departmentId","maxWidth","textAlign","my","variant","gutterBottom","onChange","indicatorColor","textColor","centered","label","onEmployeeCreated","onDelete","onEdit","onDepartmentCreated"],"sources":["/Users/chieduonwuemene/softwaredevelopment/coursera/projects/apollonia-fullstack/client/src/App.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport EmployeeManagement from './components/EmployeeManagement';\nimport DepartmentManagement from './components/DepartmentManagement';\nimport { getDepartments, getEmployees, deleteEmployee, \n         updateEmployee, deleteDepartment, updateDepartment } from './services/api';\nimport { Box, Container, Typography, Divider, Tabs, Tab } from '@mui/material';\n\nfunction TabPanel({ children, value, index}) {\n  \n    return (\n      <div role=\"tabpanel\" hidden={value !== index}>\n        {value === index && <Box sx={{ p: 3 }}>{children}</Box>}\n      </div>\n    );\n  }\n\nfunction App() {\n  const [tabIndex, setTabIndex] = useState(0); // Manage the active tab\n  const [departments, setDepartments] = useState([]);\n  const [employees, setEmployees] = useState([]);\n\n  // Handle tab change\n  const handleTabChange = (event, newValue) => {\n    setTabIndex(newValue);\n  };\n\n  const handleDeleteEmployee = async (employeeId) => {\n    try {\n      // Call the API to delete the employee\n      await deleteEmployee(employeeId);  // This should be the API call to delete the employee\n\n      // After deleting, re-fetch the employee and department lists to refresh the UI\n      await fetchEmployees();\n      await fetchDepartments();\n    } catch (error) {\n      console.error(\"Error deleting employee:\", error);\n    }\n  };\n\n  const handleEditEmployee = async (employee) => {\n    try {\n        console.log('In handleEditEmployee:', employee);\n        await updateEmployee(employee._id, employee);\n\n        //Add a short delay to account for database processing time\n        await new Promise((resolve) => setTimeout(resolve, 200));\n\n      // After updating, re-fetch the employee and department lists to refresh the UI\n      await fetchEmployees();\n      await fetchDepartments();\n    } catch (error) {\n      console.error(\"Error updating employee:\", error);\n    }\n  }\n\n  const handleEditDepartment = async (department) => {\n    try {\n        // console.log(employee);\n        await updateDepartment(department._id, department);\n\n        //Add a short delay to account for database processing time\n        await new Promise((resolve) => setTimeout(resolve, 200));\n\n      // After updating, re-fetch the employee and department lists to refresh the UI\n      await fetchEmployees();\n      await fetchDepartments();\n    } catch (error) {\n      console.error(\"Error updating department:\", error);\n    }\n  }\n\n  // Fetch departments with employees\n  const fetchDepartments = async () => {\n    const data = await getDepartments();\n    setDepartments(data);\n  };\n\n  // Fetch employees grouped by department\n  const fetchEmployees = async () => {\n    const data = await getEmployees();\n    setEmployees(data);\n  };\n\n  // Fetch data initially when the app loads\n  useEffect(() => {\n    fetchDepartments();\n    fetchEmployees();\n  }, []);\n\n  // Function to be passed to EmployeeForm to refresh data after new employee creation\n  const handleEmployeeCreated = async () => {\n     // For some reason, both departments and employees need to be fetched\n     // in order to update the EmployeeList UI after a new employee is created.\n     // This is a workaround to refresh the data.\n     // It may have something to do with the way the data is modeled - \n     // i.e. a circular reference. (departments have employees and employees have departments).\n     await fetchDepartments(); \n     await fetchEmployees();\n  };\n\n  const handleDepartmentCreated = async () => {\n    await fetchDepartments();\n  }\n\n  const handleDeleteDepartment = async (departmentId) => {\n    try {\n      // Call the API to delete the department\n      await deleteDepartment(departmentId);  // This should be the API call to delete the department\n\n      // After deleting, re-fetch the employee and department lists to refresh the UI\n      await fetchEmployees();\n      await fetchDepartments();\n    } catch (error) {\n      console.error(\"Error deleting department:\", error);\n    }\n  };\n\n  return (\n    <Container maxWidth=\"lg\">\n      {/* Main Title */}\n      <Box sx={{ textAlign: 'center', my: 4 }}>\n        <Typography variant=\"h3\" gutterBottom>\n          Apollonia Dental Employee Management\n        </Typography>\n        <Divider />\n      </Box>\n\n       {/* Tabs Navigation */}\n       <Tabs\n        value={tabIndex}\n        onChange={handleTabChange}\n        indicatorColor=\"primary\"\n        textColor=\"primary\"\n        centered\n      >\n        <Tab label=\"Manage Employees\" />\n        <Tab label=\"Manage Departments\" />\n      </Tabs>\n\n      {/* Tab Panels */}\n      <TabPanel value={tabIndex} index={0}>\n        {/* Manage Employees Tab */}\n        <EmployeeManagement employees={employees} \n                            departments={departments} \n                            onEmployeeCreated={handleEmployeeCreated} \n                            onDelete={handleDeleteEmployee} \n                            onEdit={handleEditEmployee}/>\n      </TabPanel>\n\n      {/* Manage Departments Tab */}\n      {<TabPanel value={tabIndex} index={1}>\n        <DepartmentManagement departments={departments} \n                              onDepartmentCreated={handleDepartmentCreated} \n                              onDelete={handleDeleteDepartment}\n                              onEdit={handleEditDepartment}/>\n      </TabPanel> }\n\n    </Container>\n  );\n}\n\nexport default App;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}