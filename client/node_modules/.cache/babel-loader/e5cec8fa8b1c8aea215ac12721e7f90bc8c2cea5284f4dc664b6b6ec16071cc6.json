{"ast":null,"code":"var _jsxFileName = \"/Users/chieduonwuemene/softwaredevelopment/coursera/projects/apollonia-fullstack/client/src/App.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport EmployeeManagement from './components/EmployeeManagement';\nimport DepartmentManagement from './components/DepartmentManagement';\nimport { getDepartments, getEmployees, deleteEmployee, updateEmployee, deleteDepartment, updateDepartment } from './services/api';\nimport { Box, Container, Typography, Divider, Tabs, Tab } from '@mui/material';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction TabPanel({\n  children,\n  value,\n  index\n}) {\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    role: \"tabpanel\",\n    hidden: value !== index,\n    children: value === index && /*#__PURE__*/_jsxDEV(Box, {\n      sx: {\n        p: 3\n      },\n      children: children\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 12,\n      columnNumber: 29\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 11,\n    columnNumber: 7\n  }, this);\n}\n_c = TabPanel;\nfunction App() {\n  _s();\n  const [tabIndex, setTabIndex] = useState(0); // Manage the active tab\n  const [departments, setDepartments] = useState([]);\n  const [employees, setEmployees] = useState([]);\n\n  // Handle tab change\n  const handleTabChange = (event, newValue) => {\n    setTabIndex(newValue);\n  };\n  const handleDeleteEmployee = async employeeId => {\n    try {\n      // Call the API to delete the employee\n      await deleteEmployee(employeeId); // This should be the API call to delete the employee\n\n      // After deleting, re-fetch the employee and department lists to refresh the UI\n      await fetchEmployees();\n      await fetchDepartments();\n    } catch (error) {\n      console.error(\"Error deleting employee:\", error);\n    }\n  };\n  const handleEditEmployee = async employee => {\n    try {\n      console.log('In handleEditEmployee:', employee);\n      await updateEmployee(employee._id, employee);\n\n      //Add a short delay to account for database processing time\n      await new Promise(resolve => setTimeout(resolve, 200));\n\n      // After updating, re-fetch the employee and department lists to refresh the UI\n      await fetchEmployees();\n      await fetchDepartments();\n    } catch (error) {\n      console.error(\"Error updating employee:\", error);\n    }\n  };\n  const handleEditDepartment = async department => {\n    try {\n      // console.log(employee);\n      await updateDepartment(department._id, department);\n\n      //Add a short delay to account for database processing time\n      await new Promise(resolve => setTimeout(resolve, 200));\n\n      // After updating, re-fetch the employee and department lists to refresh the UI\n      await fetchEmployees();\n      await fetchDepartments();\n    } catch (error) {\n      console.error(\"Error updating department:\", error);\n    }\n  };\n\n  // Fetch departments with employees\n  const fetchDepartments = async () => {\n    const data = await getDepartments();\n    setDepartments(data);\n  };\n\n  // Fetch employees grouped by department\n  const fetchEmployees = async () => {\n    const data = await getEmployees();\n    setEmployees(data);\n  };\n\n  // Fetch data initially when the app loads\n  useEffect(() => {\n    fetchDepartments();\n    fetchEmployees();\n  }, []);\n\n  // Function to be passed to EmployeeForm to refresh data after new employee creation\n  const handleEmployeeCreated = async () => {\n    // For some reason, both departments and employees need to be fetched\n    // in order to update the EmployeeList UI after a new employee is created.\n    // This is a workaround to refresh the data.\n    // It may have something to do with the way the data is modeled - \n    // i.e. a circular reference. (departments have employees and employees have departments).\n    await fetchDepartments();\n    await fetchEmployees();\n  };\n  const handleDepartmentCreated = async () => {\n    await fetchDepartments();\n  };\n  const handleDeleteDepartment = async departmentId => {\n    try {\n      // Call the API to delete the department\n      await deleteDepartment(departmentId); // This should be the API call to delete the department\n\n      // After deleting, re-fetch the employee and department lists to refresh the UI\n      await fetchEmployees();\n      await fetchDepartments();\n    } catch (error) {\n      console.error(\"Error deleting department:\", error);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(Container, {\n    maxWidth: \"lg\",\n    children: [/*#__PURE__*/_jsxDEV(Box, {\n      sx: {\n        textAlign: 'center',\n        my: 4\n      },\n      children: [/*#__PURE__*/_jsxDEV(Typography, {\n        variant: \"h3\",\n        gutterBottom: true,\n        children: \"Apollonia Dental Employee Management\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 122,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Divider, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 125,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 121,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Tabs, {\n      value: tabIndex,\n      onChange: handleTabChange,\n      indicatorColor: \"primary\",\n      textColor: \"primary\",\n      centered: true,\n      children: [/*#__PURE__*/_jsxDEV(Tab, {\n        label: \"Manage Employees\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 136,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Tab, {\n        label: \"Manage Departments\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 137,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 129,\n      columnNumber: 8\n    }, this), /*#__PURE__*/_jsxDEV(TabPanel, {\n      value: tabIndex,\n      index: 0,\n      children: /*#__PURE__*/_jsxDEV(EmployeeManagement, {\n        employees: employees,\n        departments: departments,\n        onEmployeeCreated: handleEmployeeCreated,\n        onDelete: handleDeleteEmployee,\n        onEdit: handleEditEmployee\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 143,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 141,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(TabPanel, {\n      value: tabIndex,\n      index: 1,\n      children: /*#__PURE__*/_jsxDEV(DepartmentManagement, {\n        departments: departments,\n        onDepartmentCreated: handleDepartmentCreated,\n        onDelete: handleDeleteDepartment,\n        onEdit: handleEditDepartment\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 152,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 151,\n      columnNumber: 8\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 119,\n    columnNumber: 5\n  }, this);\n}\n_s(App, \"rQP7f0Edd0ubZK8ffYva667HoiY=\");\n_c2 = App;\nexport default App;\nvar _c, _c2;\n$RefreshReg$(_c, \"TabPanel\");\n$RefreshReg$(_c2, \"App\");","map":{"version":3,"names":["React","useState","useEffect","EmployeeManagement","DepartmentManagement","getDepartments","getEmployees","deleteEmployee","updateEmployee","deleteDepartment","updateDepartment","Box","Container","Typography","Divider","Tabs","Tab","jsxDEV","_jsxDEV","TabPanel","children","value","index","role","hidden","sx","p","fileName","_jsxFileName","lineNumber","columnNumber","_c","App","_s","tabIndex","setTabIndex","departments","setDepartments","employees","setEmployees","handleTabChange","event","newValue","handleDeleteEmployee","employeeId","fetchEmployees","fetchDepartments","error","console","handleEditEmployee","employee","log","_id","Promise","resolve","setTimeout","handleEditDepartment","department","data","handleEmployeeCreated","handleDepartmentCreated","handleDeleteDepartment","departmentId","maxWidth","textAlign","my","variant","gutterBottom","onChange","indicatorColor","textColor","centered","label","onEmployeeCreated","onDelete","onEdit","onDepartmentCreated","_c2","$RefreshReg$"],"sources":["/Users/chieduonwuemene/softwaredevelopment/coursera/projects/apollonia-fullstack/client/src/App.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport EmployeeManagement from './components/EmployeeManagement';\nimport DepartmentManagement from './components/DepartmentManagement';\nimport { getDepartments, getEmployees, deleteEmployee, \n         updateEmployee, deleteDepartment, updateDepartment } from './services/api';\nimport { Box, Container, Typography, Divider, Tabs, Tab } from '@mui/material';\n\nfunction TabPanel({ children, value, index}) {\n  \n    return (\n      <div role=\"tabpanel\" hidden={value !== index}>\n        {value === index && <Box sx={{ p: 3 }}>{children}</Box>}\n      </div>\n    );\n  }\n\nfunction App() {\n  const [tabIndex, setTabIndex] = useState(0); // Manage the active tab\n  const [departments, setDepartments] = useState([]);\n  const [employees, setEmployees] = useState([]);\n\n  // Handle tab change\n  const handleTabChange = (event, newValue) => {\n    setTabIndex(newValue);\n  };\n\n  const handleDeleteEmployee = async (employeeId) => {\n    try {\n      // Call the API to delete the employee\n      await deleteEmployee(employeeId);  // This should be the API call to delete the employee\n\n      // After deleting, re-fetch the employee and department lists to refresh the UI\n      await fetchEmployees();\n      await fetchDepartments();\n    } catch (error) {\n      console.error(\"Error deleting employee:\", error);\n    }\n  };\n\n  const handleEditEmployee = async (employee) => {\n    try {\n        console.log('In handleEditEmployee:', employee);\n        await updateEmployee(employee._id, employee);\n\n        //Add a short delay to account for database processing time\n        await new Promise((resolve) => setTimeout(resolve, 200));\n\n      // After updating, re-fetch the employee and department lists to refresh the UI\n      await fetchEmployees();\n      await fetchDepartments();\n    } catch (error) {\n      console.error(\"Error updating employee:\", error);\n    }\n  }\n\n  const handleEditDepartment = async (department) => {\n    try {\n        // console.log(employee);\n        await updateDepartment(department._id, department);\n\n        //Add a short delay to account for database processing time\n        await new Promise((resolve) => setTimeout(resolve, 200));\n\n      // After updating, re-fetch the employee and department lists to refresh the UI\n      await fetchEmployees();\n      await fetchDepartments();\n    } catch (error) {\n      console.error(\"Error updating department:\", error);\n    }\n  }\n\n  // Fetch departments with employees\n  const fetchDepartments = async () => {\n    const data = await getDepartments();\n    setDepartments(data);\n  };\n\n  // Fetch employees grouped by department\n  const fetchEmployees = async () => {\n    const data = await getEmployees();\n    setEmployees(data);\n  };\n\n  // Fetch data initially when the app loads\n  useEffect(() => {\n    fetchDepartments();\n    fetchEmployees();\n  }, []);\n\n  // Function to be passed to EmployeeForm to refresh data after new employee creation\n  const handleEmployeeCreated = async () => {\n     // For some reason, both departments and employees need to be fetched\n     // in order to update the EmployeeList UI after a new employee is created.\n     // This is a workaround to refresh the data.\n     // It may have something to do with the way the data is modeled - \n     // i.e. a circular reference. (departments have employees and employees have departments).\n     await fetchDepartments(); \n     await fetchEmployees();\n  };\n\n  const handleDepartmentCreated = async () => {\n    await fetchDepartments();\n  }\n\n  const handleDeleteDepartment = async (departmentId) => {\n    try {\n      // Call the API to delete the department\n      await deleteDepartment(departmentId);  // This should be the API call to delete the department\n\n      // After deleting, re-fetch the employee and department lists to refresh the UI\n      await fetchEmployees();\n      await fetchDepartments();\n    } catch (error) {\n      console.error(\"Error deleting department:\", error);\n    }\n  };\n\n  return (\n    <Container maxWidth=\"lg\">\n      {/* Main Title */}\n      <Box sx={{ textAlign: 'center', my: 4 }}>\n        <Typography variant=\"h3\" gutterBottom>\n          Apollonia Dental Employee Management\n        </Typography>\n        <Divider />\n      </Box>\n\n       {/* Tabs Navigation */}\n       <Tabs\n        value={tabIndex}\n        onChange={handleTabChange}\n        indicatorColor=\"primary\"\n        textColor=\"primary\"\n        centered\n      >\n        <Tab label=\"Manage Employees\" />\n        <Tab label=\"Manage Departments\" />\n      </Tabs>\n\n      {/* Tab Panels */}\n      <TabPanel value={tabIndex} index={0}>\n        {/* Manage Employees Tab */}\n        <EmployeeManagement employees={employees} \n                            departments={departments} \n                            onEmployeeCreated={handleEmployeeCreated} \n                            onDelete={handleDeleteEmployee} \n                            onEdit={handleEditEmployee}/>\n      </TabPanel>\n\n      {/* Manage Departments Tab */}\n      {<TabPanel value={tabIndex} index={1}>\n        <DepartmentManagement departments={departments} \n                              onDepartmentCreated={handleDepartmentCreated} \n                              onDelete={handleDeleteDepartment}\n                              onEdit={handleEditDepartment}/>\n      </TabPanel> }\n\n    </Container>\n  );\n}\n\nexport default App;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}